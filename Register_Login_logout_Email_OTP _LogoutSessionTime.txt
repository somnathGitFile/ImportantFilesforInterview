1)For Email send through django... register in settings.py file

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'somcjc@gmail.com' #sender's email-id
EMAIL_HOST_PASSWORD = 'somcjc@1234' #password associated with above email-id

**imports for EMail send
from random import randint
from django.conf import settings
from django.core.mail import send_mail

otp = randint(1000,9999)

**loginView for sendingig mail
def loginView(request):
    template_name = 'AUTH_APP/login.html'
    if request.method == 'POST':
        un = request.POST.get('u')
        pw = request.POST.get('p')
        eml = request.POST.get('e')

        global new
        user = authenticate(username=un, password=pw)
        new = user
        if user is not None:
            subject = 'welcome to CJC Python world'
            message = f'Hi {user.username},{eml},your otp is:{otp}thank you for registering in CJC World.'
            email_from = settings.EMAIL_HOST_USER
            recipient_list = [eml]
            send_mail(subject, message, email_from, recipient_list)
            
            return redirect('otp_url')
    context = {}
    return render(request, template_name, context)

**OTPView for Enter the OTP

def OTPView(request):
    template_name = 'AUTH_APP/otp.html'
    context = {}
    if request.method =='POST':
        otp1 = int(request.POST.get('otp'))
        if otp == otp1:
            login(request, new)
            return redirect('showlap_url')
    return render(request, template_name,context)
**OTPView URLS.py
->path('otp/', views.OTPView, name="otp_url")


***Session for Logout***

<> Register In settings.py <>

TIME= 20*60  #//four hours  or your time
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
SESSION_EXPIRE_AT_BROWSER_CLOSE= True
SESSION_COOKIE_AGE = TIME    #//change expired session
SESSION_IDLE_TIMEOUT = TIME  #//logout

<>In project level take middlewere.py file <>

from django.contrib.auth import logout
#from django.contrib import messages
import datetime
from django.shortcuts import redirect
import settings

class SessionIdleTimeout:
    def process_request(self, request):
        if request.user.is_authenticated():
            current_datetime = datetime.datetime.now()
            if ('last_login' in request.session):
                last = (current_datetime - request.session['last_login']).seconds
                if last > settings.SESSION_IDLE_TIMEOUT:
                    logout(request)
                    return redirect('login_url')
            else:
                request.session['last_login'] = current_datetime
        return None


2)For *Pagination*

**imports for pagination
>from django.core.paginator import Paginator, EmptyPage

** chnages in showlaptopView**

def showlaptopView(request, page=1):
    data = Laptop.objects.all()
    template_name = 'crudapp/showlap.html'
    paginator = Paginator(data, 2)
    try:
        data = paginator.page(page)
    except EmptyPage:
        data = paginator.page(paginator.num_pages)
    context = {'obj': data}
    return render(request, template_name, context)

**Chnages in showlaptop.html**
<div>
{% if obj.has_previous %}
      <a  href="{% url 'showlap_url' obj.previous_page_number %}"><button class=" bg-primary text-white">PRIVIOUS</button></a>
    {% endif %}
    <span><b>
      Page {{obj.number}} of {{obj.paginator.num_pages}}
    </b></span>
    <a  href="{% url 'showlap_url' obj.next_page_number %}"><button class=" bg-primary text-white">NEXT</button></a>
</div>

3)Regstration , Login and Logout for Authentification:
**imports for registerView and loginView**

from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.decorators import login_required

**RegisterView
def registerView(request):
    form = UserCreationForm()
    template_name = 'app1/register.html'
    context = {'form': form}
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login_url')
    return render(request, template_name, context)

**LoginView
def login_view(request):
    template_name = 'app1/login.html'
    context = {}
    if request.method == 'POST':
        un = request.POST.get('usr')
        pw = request.POST.get('pass')

        user = authenticate(username=un, password=pw)
        if user is not None:
            login(request, user)
            return redirect('showcustomer_url')

    return render(request, template_name, context)

**LogOutView
def logoutView(request):
    logout(request)
    return redirect('login_url')
